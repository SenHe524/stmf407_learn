<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\Object\project.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\Object\project.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060528: Last Updated: Sat Aug 06 14:27:20 2022
<BR><P>
<H3>Maximum Stack Usage =       3904 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; slaveinfo &rArr; si_map_sii &rArr; si_siiPDO &rArr; ec_siistring &rArr; ecx_siistring &rArr; ecx_siifind &rArr; ecx_siigetbyte &rArr; ecx_readeepromFP &rArr; ecx_eeprom_waitnotbusyFP &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; EtherCat_MACRAW_Recv &rArr; wiz_recv_data &rArr; WIZCHIP_READ_BUF
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[ba]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[5]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">NMI_Handler</a><BR>
 <LI><a href="#[6]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">HardFault_Handler</a><BR>
 <LI><a href="#[7]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">MemManage_Handler</a><BR>
 <LI><a href="#[8]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">BusFault_Handler</a><BR>
 <LI><a href="#[9]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">UsageFault_Handler</a><BR>
 <LI><a href="#[a]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">SVC_Handler</a><BR>
 <LI><a href="#[b]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">DebugMon_Handler</a><BR>
 <LI><a href="#[c]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">PendSV_Handler</a><BR>
 <LI><a href="#[d]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">SysTick_Handler</a><BR>
 <LI><a href="#[20]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[20]">ADC_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[8]">BusFault_Handler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[22]">CAN1_RX0_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[23]">CAN1_RX1_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[24]">CAN1_SCE_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[21]">CAN1_TX_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[4e]">CAN2_RX0_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[4f]">CAN2_RX1_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[50]">CAN2_SCE_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[4d]">CAN2_TX_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[5d]">CRYP_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[5c]">DCMI_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[19]">DMA1_Stream0_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[1a]">DMA1_Stream1_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream2_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[1c]">DMA1_Stream3_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[1d]">DMA1_Stream4_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[1e]">DMA1_Stream5_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[1f]">DMA1_Stream6_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[3d]">DMA1_Stream7_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[46]">DMA2_Stream0_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[47]">DMA2_Stream1_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[48]">DMA2_Stream2_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[49]">DMA2_Stream3_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[4a]">DMA2_Stream4_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[52]">DMA2_Stream5_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[53]">DMA2_Stream6_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[54]">DMA2_Stream7_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[b]">DebugMon_Handler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[4b]">ETH_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[4c]">ETH_WKUP_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[14]">EXTI0_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[36]">EXTI15_10_IRQHandler</a> from myspi.o(i.EXTI15_10_IRQHandler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[15]">EXTI1_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[16]">EXTI2_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[17]">EXTI3_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[18]">EXTI4_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[25]">EXTI9_5_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[12]">FLASH_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[5f]">FPU_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[3e]">FSMC_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[5e]">HASH_RNG_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[6]">HardFault_Handler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[2e]">I2C1_ER_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[2d]">I2C1_EV_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[30]">I2C2_ER_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[2f]">I2C2_EV_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[57]">I2C3_ER_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[56]">I2C3_EV_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[7]">MemManage_Handler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[5]">NMI_Handler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[51]">OTG_FS_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[38]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[59]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[58]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[5b]">OTG_HS_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[5a]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[f]">PVD_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[c]">PendSV_Handler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[13]">RCC_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[37]">RTC_Alarm_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[11]">RTC_WKUP_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[4]">Reset_Handler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[3f]">SDIO_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[31]">SPI1_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[32]">SPI2_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[6f]">SPI3_CS_Deselect</a> from myspi.o(i.SPI3_CS_Deselect) referenced from port_func.o(i.w5500_init)
 <LI><a href="#[70]">SPI3_CS_Select</a> from myspi.o(i.SPI3_CS_Select) referenced from port_func.o(i.w5500_init)
 <LI><a href="#[41]">SPI3_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[72]">SPI3_Read_Byte</a> from myspi.o(i.SPI3_Read_Byte) referenced from port_func.o(i.w5500_init)
 <LI><a href="#[71]">SPI3_Write_Byte</a> from myspi.o(i.SPI3_Write_Byte) referenced from port_func.o(i.w5500_init)
 <LI><a href="#[6e]">SPI_CrisEnter</a> from myspi.o(i.SPI_CrisEnter) referenced from port_func.o(i.w5500_init)
 <LI><a href="#[6d]">SPI_CrisExit</a> from myspi.o(i.SPI_CrisExit) referenced from port_func.o(i.w5500_init)
 <LI><a href="#[a]">SVC_Handler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[74]">Spi_ReadBurst</a> from myspi.o(i.Spi_ReadBurst) referenced from port_func.o(i.w5500_init)
 <LI><a href="#[73]">Spi_WriteBurst</a> from myspi.o(i.Spi_WriteBurst) referenced from port_func.o(i.w5500_init)
 <LI><a href="#[d]">SysTick_Handler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[60]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f40xx.o(.text)
 <LI><a href="#[10]">TAMP_STAMP_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[26]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[29]">TIM1_CC_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[28]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[27]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[2a]">TIM2_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[2b]">TIM3_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[2c]">TIM4_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[40]">TIM5_IRQHandler</a> from timer.o(i.TIM5_IRQHandler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[44]">TIM6_DAC_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[45]">TIM7_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[39]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[3c]">TIM8_CC_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[3b]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[3a]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[42]">UART4_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[43]">UART5_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[33]">USART1_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[34]">USART2_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[35]">USART3_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[55]">USART6_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[9]">UsageFault_Handler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[e]">WWDG_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[77]">__main</a> from __main.o(!!!main) referenced from startup_stm32f40xx.o(.text)
 <LI><a href="#[63]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[62]">_sputc</a> from _sputc.o(.text) referenced from noretval__2sprintf.o(.text)
 <LI><a href="#[64]">fputc</a> from usart.o(i.fputc) referenced from _printf_char_file.o(.text)
 <LI><a href="#[75]">wizchip_bus_readdata</a> from wizchip_conf.o(i.wizchip_bus_readdata) referenced from wizchip_conf.o(.data)
 <LI><a href="#[76]">wizchip_bus_writedata</a> from wizchip_conf.o(i.wizchip_bus_writedata) referenced from wizchip_conf.o(.data)
 <LI><a href="#[65]">wizchip_cris_enter</a> from wizchip_conf.o(i.wizchip_cris_enter) referenced from wizchip_conf.o(.data)
 <LI><a href="#[65]">wizchip_cris_enter</a> from wizchip_conf.o(i.wizchip_cris_enter) referenced from wizchip_conf.o(i.reg_wizchip_cris_cbfunc)
 <LI><a href="#[66]">wizchip_cris_exit</a> from wizchip_conf.o(i.wizchip_cris_exit) referenced from wizchip_conf.o(.data)
 <LI><a href="#[66]">wizchip_cris_exit</a> from wizchip_conf.o(i.wizchip_cris_exit) referenced from wizchip_conf.o(i.reg_wizchip_cris_cbfunc)
 <LI><a href="#[68]">wizchip_cs_deselect</a> from wizchip_conf.o(i.wizchip_cs_deselect) referenced from wizchip_conf.o(.data)
 <LI><a href="#[68]">wizchip_cs_deselect</a> from wizchip_conf.o(i.wizchip_cs_deselect) referenced from wizchip_conf.o(i.reg_wizchip_cs_cbfunc)
 <LI><a href="#[67]">wizchip_cs_select</a> from wizchip_conf.o(i.wizchip_cs_select) referenced from wizchip_conf.o(.data)
 <LI><a href="#[67]">wizchip_cs_select</a> from wizchip_conf.o(i.wizchip_cs_select) referenced from wizchip_conf.o(i.reg_wizchip_cs_cbfunc)
 <LI><a href="#[6b]">wizchip_spi_readburst</a> from wizchip_conf.o(i.wizchip_spi_readburst) referenced from wizchip_conf.o(i.reg_wizchip_spiburst_cbfunc)
 <LI><a href="#[69]">wizchip_spi_readbyte</a> from wizchip_conf.o(i.wizchip_spi_readbyte) referenced from wizchip_conf.o(i.reg_wizchip_spi_cbfunc)
 <LI><a href="#[6c]">wizchip_spi_writeburst</a> from wizchip_conf.o(i.wizchip_spi_writeburst) referenced from wizchip_conf.o(i.reg_wizchip_spiburst_cbfunc)
 <LI><a href="#[6a]">wizchip_spi_writebyte</a> from wizchip_conf.o(i.wizchip_spi_writebyte) referenced from wizchip_conf.o(i.reg_wizchip_spi_cbfunc)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[77]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[78]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[7a]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[196]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[197]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[7b]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[198]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[7c]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[a7]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[199]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[7e]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[80]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[81]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[83]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[85]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[86]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>

<P><STRONG><a name="[88]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[19a]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[93]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[8a]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[19b]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[8c]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[19c]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[19d]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[19e]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[19f]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[1a0]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[1a1]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[8e]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[1a2]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[1a3]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[1a4]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[1a5]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[1a6]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[1a7]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[1a8]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[1a9]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[1aa]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[1ab]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[1ac]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[1ad]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[1ae]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[98]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[1af]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[1b0]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[1b1]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[1b2]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[1b3]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[1b4]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[1b5]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[79]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[1b6]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[90]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[92]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[1b7]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[94]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 3904 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; slaveinfo &rArr; si_map_sii &rArr; si_siiPDO &rArr; ec_siistring &rArr; ecx_siistring &rArr; ecx_siifind &rArr; ecx_siigetbyte &rArr; ecx_readeepromFP &rArr; ecx_eeprom_waitnotbusyFP &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; EtherCat_MACRAW_Recv &rArr; wiz_recv_data &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[1b8]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[bb]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[97]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[1b9]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[99]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[4]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>CRYP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[ba]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f40xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1ba]"></a>__use_no_semihosting</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi_2.o(.text), UNUSED)

<P><STRONG><a name="[9b]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, noretval__2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaveinfo
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si_siiPDO
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si_sdo
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si_map_sii
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si_map_sdo
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si_PDOassign
</UL>

<P><STRONG><a name="[9d]"></a>__2sprintf</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, noretval__2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_init
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtype2string
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDO2string
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_err2string
</UL>

<P><STRONG><a name="[a0]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[a1]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[9f]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[7f]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[84]"></a>_printf_longlong_dec</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
</UL>

<P><STRONG><a name="[a4]"></a>_printf_longlong_hex</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, _printf_hex_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[82]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[87]"></a>_printf_ll_hex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_hex_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[a5]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[d6]"></a>strcpy</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_from_table
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDO2string
</UL>

<P><STRONG><a name="[d7]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDO2string
</UL>

<P><STRONG><a name="[125]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_SDOread
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPRD
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_BRD
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_APRD
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_writedatagramdata
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_inframe
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_waitinframe_red
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_SoEread
</UL>

<P><STRONG><a name="[a8]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[1bb]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[a9]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_pusherror
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_poperror
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_lookup_prev_sii
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[1bc]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1bd]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1be]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[ad]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_clearmbx
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_writedatagramdata
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EtherCat_MACRAW_Recv
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si_sdo
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDO2string
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>

<P><STRONG><a name="[aa]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[1bf]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[133]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_packeterror
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_SDOerror
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_SDOinfoerror
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_mbxerror
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_mbxemergencyerror
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siigetbyte
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_init_context
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_set_slaves_to_default
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_map_sii
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_SoEerror
</UL>

<P><STRONG><a name="[1c0]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[1c1]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[ab]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[ac]"></a>strncpy</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readOEsingle
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readODdescription
</UL>

<P><STRONG><a name="[1c2]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1c3]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1c4]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1c5]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1c6]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[a3]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[a2]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[1c7]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[b3]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[9e]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[62]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noretval__2sprintf.o(.text)
</UL>
<P><STRONG><a name="[b6]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[b7]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[89]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[9c]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[8d]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[b5]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[af]"></a>_btod_etento</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[b8]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ferror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[1c8]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[b9]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1c9]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[91]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[96]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[18c]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[b0]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[bd]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[bc]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[be]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[bf]"></a>_e2e</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[b1]"></a>_btod_ediv</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[b2]"></a>_btod_emul</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[c0]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[36]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, myspi.o(i.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI15_10_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[c2]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_exti.o(i.EXTI_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[c1]"></a>EXTI_GetITStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_exti.o(i.EXTI_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[f3]"></a>EXTI_Init</STRONG> (Thumb, 110 bytes, Stack size 12 bytes, stm32f4xx_exti.o(i.EXTI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_GPIO_Configuration
</UL>

<P><STRONG><a name="[c3]"></a>EtherCat_Close</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ethercatcontrol.o(i.EtherCat_Close), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_closenic
</UL>

<P><STRONG><a name="[c5]"></a>EtherCat_MACRAW_Open</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, ethercatcontrol.o(i.EtherCat_MACRAW_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = EtherCat_MACRAW_Open &rArr; socket &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_setupnic
</UL>

<P><STRONG><a name="[c9]"></a>EtherCat_MACRAW_Recv</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, ethercatcontrol.o(i.EtherCat_MACRAW_Recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EtherCat_MACRAW_Recv &rArr; wiz_recv_data &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_recv_data
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSn_RX_RSR
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_recvpkt
</UL>

<P><STRONG><a name="[cd]"></a>EtherCat_MACRAW_Send</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, ethercatcontrol.o(i.EtherCat_MACRAW_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = EtherCat_MACRAW_Send &rArr; wiz_send_data &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_send_data
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_outframe
</UL>

<P><STRONG><a name="[d1]"></a>GPIO_Init</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, stm32f4xx_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_GPIO_Configuration
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Configuration
</UL>

<P><STRONG><a name="[de]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_gpio.o(i.GPIO_PinAFConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Configuration
</UL>

<P><STRONG><a name="[c8]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EtherCat_MACRAW_Open
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaveinfo
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_CS_Select
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Hardware_Reset
</UL>

<P><STRONG><a name="[d8]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_setupnic
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_GPIO_Configuration
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Configuration
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_CS_Deselect
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Hardware_Reset
</UL>

<P><STRONG><a name="[cf]"></a>Led_Init</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, slaveinfo.o(i.Led_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Led_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f5]"></a>NVIC_Init</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_GPIO_Configuration
</UL>

<P><STRONG><a name="[f4]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_GPIO_Configuration
</UL>

<P><STRONG><a name="[d0]"></a>RCC_AHB1PeriphClockCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_AHB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_GPIO_Configuration
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Configuration
</UL>

<P><STRONG><a name="[dd]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Configuration
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3_Init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2_Init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
</UL>

<P><STRONG><a name="[f1]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_GPIO_Configuration
</UL>

<P><STRONG><a name="[d2]"></a>SDO2string</STRONG> (Thumb, 438 bytes, Stack size 80 bytes, slaveinfo.o(i.SDO2string))
<BR><BR>[Stack]<UL><LI>Max Depth = 3552 + Unknown Stack Size
<LI>Call Chain = SDO2string &rArr; ec_SDOread &rArr; ecx_SDOread &rArr; ecx_mbxsend &rArr; ecx_mbxempty &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; EtherCat_MACRAW_Recv &rArr; wiz_recv_data &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_SDOread
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_elist2string
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si_sdo
</UL>

<P><STRONG><a name="[6f]"></a>SPI3_CS_Deselect</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, myspi.o(i.SPI3_CS_Deselect))
<BR><BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> port_func.o(i.w5500_init)
</UL>
<P><STRONG><a name="[70]"></a>SPI3_CS_Select</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, myspi.o(i.SPI3_CS_Select))
<BR><BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> port_func.o(i.w5500_init)
</UL>
<P><STRONG><a name="[72]"></a>SPI3_Read_Byte</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, myspi.o(i.SPI3_Read_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI3_Read_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_ReadBurst
</UL>
<BR>[Address Reference Count : 1]<UL><LI> port_func.o(i.w5500_init)
</UL>
<P><STRONG><a name="[71]"></a>SPI3_Write_Byte</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, myspi.o(i.SPI3_Write_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI3_Write_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_WriteBurst
</UL>
<BR>[Address Reference Count : 1]<UL><LI> port_func.o(i.w5500_init)
</UL>
<P><STRONG><a name="[e0]"></a>SPI_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Configuration
</UL>

<P><STRONG><a name="[dc]"></a>SPI_Configuration</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, myspi.o(i.SPI_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SPI_Configuration &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_init
</UL>

<P><STRONG><a name="[6e]"></a>SPI_CrisEnter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, myspi.o(i.SPI_CrisEnter))
<BR>[Address Reference Count : 1]<UL><LI> port_func.o(i.w5500_init)
</UL>
<P><STRONG><a name="[6d]"></a>SPI_CrisExit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, myspi.o(i.SPI_CrisExit))
<BR>[Address Reference Count : 1]<UL><LI> port_func.o(i.w5500_init)
</UL>
<P><STRONG><a name="[d9]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_I2S_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_Write_Byte
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_Read_Byte
</UL>

<P><STRONG><a name="[db]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_I2S_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_Write_Byte
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_Read_Byte
</UL>

<P><STRONG><a name="[da]"></a>SPI_I2S_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_I2S_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_Write_Byte
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_Read_Byte
</UL>

<P><STRONG><a name="[df]"></a>SPI_Init</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, stm32f4xx_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Configuration
</UL>

<P><STRONG><a name="[f2]"></a>SYSCFG_EXTILineConfig</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f4xx_syscfg.o(i.SYSCFG_EXTILineConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SYSCFG_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_GPIO_Configuration
</UL>

<P><STRONG><a name="[74]"></a>Spi_ReadBurst</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, myspi.o(i.Spi_ReadBurst))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Spi_ReadBurst &rArr; SPI3_Read_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_Read_Byte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> port_func.o(i.w5500_init)
</UL>
<P><STRONG><a name="[73]"></a>Spi_WriteBurst</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, myspi.o(i.Spi_WriteBurst))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Spi_WriteBurst &rArr; SPI3_Write_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_Write_Byte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> port_func.o(i.w5500_init)
</UL>
<P><STRONG><a name="[60]"></a>SystemInit</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, system_stm32f4xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(.text)
</UL>
<P><STRONG><a name="[40]"></a>TIM5_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, timer.o(i.TIM5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM5_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[ed]"></a>TIM_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3_Init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2_Init
</UL>

<P><STRONG><a name="[e3]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
</UL>

<P><STRONG><a name="[ea]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2And3_start
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[fa]"></a>TIM_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[e2]"></a>TIM_GetITStatus</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
</UL>

<P><STRONG><a name="[e4]"></a>TIM_ITRxExternalClockConfig</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, stm32f4xx_tim.o(i.TIM_ITRxExternalClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TIM_ITRxExternalClockConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3_Init
</UL>

<P><STRONG><a name="[eb]"></a>TIM_InternalClockConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_InternalClockConfig))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2_Init
</UL>

<P><STRONG><a name="[e5]"></a>TIM_SelectInputTrigger</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_SelectInputTrigger))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRxExternalClockConfig
</UL>

<P><STRONG><a name="[ee]"></a>TIM_SelectMasterSlaveMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_SelectMasterSlaveMode))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3_Init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2_Init
</UL>

<P><STRONG><a name="[ef]"></a>TIM_SelectOutputTrigger</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_SelectOutputTrigger))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2_Init
</UL>

<P><STRONG><a name="[ec]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, stm32f4xx_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_TimeBaseInit
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3_Init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2_Init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
</UL>

<P><STRONG><a name="[e6]"></a>Timer2And3_Init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, timer.o(i.Timer2And3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Timer2And3_Init &rArr; Timer3_Init &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3_Init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e9]"></a>Timer2And3_start</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, timer.o(i.Timer2And3_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Timer2And3_start
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e7]"></a>Timer2_Init</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, timer.o(i.Timer2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Timer2_Init &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectOutputTrigger
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectMasterSlaveMode
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_InternalClockConfig
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2And3_Init
</UL>

<P><STRONG><a name="[e8]"></a>Timer3_Init</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, timer.o(i.Timer3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Timer3_Init &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectMasterSlaveMode
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRxExternalClockConfig
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2And3_Init
</UL>

<P><STRONG><a name="[f0]"></a>W5500_GPIO_Configuration</STRONG> (Thumb, 172 bytes, Stack size 48 bytes, myspi.o(i.W5500_GPIO_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = W5500_GPIO_Configuration &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_init
</UL>

<P><STRONG><a name="[f6]"></a>W5500_Hardware_Reset</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, port_func.o(i.W5500_Hardware_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = W5500_Hardware_Reset &rArr; wizphy_getphylink &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_getphylink
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_init
</UL>

<P><STRONG><a name="[c7]"></a>WIZCHIP_READ</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, w5500.o(i.WIZCHIP_READ))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EtherCat_MACRAW_Send
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EtherCat_MACRAW_Recv
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EtherCat_MACRAW_Open
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_reset
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_sw_reset
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_send_data
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_recv_data
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSn_RX_RSR
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_getphylink
</UL>

<P><STRONG><a name="[17f]"></a>WIZCHIP_READ_BUF</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, w5500.o(i.WIZCHIP_READ_BUF))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WIZCHIP_READ_BUF
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_sw_reset
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_recv_data
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
</UL>

<P><STRONG><a name="[cc]"></a>WIZCHIP_WRITE</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, w5500.o(i.WIZCHIP_WRITE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WIZCHIP_WRITE
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EtherCat_MACRAW_Send
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EtherCat_MACRAW_Recv
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_reset
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_sw_reset
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_send_data
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_recv_data
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_setphyconf
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_init
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_RegSetup
</UL>

<P><STRONG><a name="[188]"></a>WIZCHIP_WRITE_BUF</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, w5500.o(i.WIZCHIP_WRITE_BUF))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WIZCHIP_WRITE_BUF
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_sw_reset
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_send_data
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_network_info_init
</UL>

<P><STRONG><a name="[b4]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[a6]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[9a]"></a>_sys_exit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usart.o(i._sys_exit))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[c4]"></a>close</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, socket.o(i.close))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = close &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EtherCat_Close
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
</UL>

<P><STRONG><a name="[f9]"></a>delay_init</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, delay.o(i.delay_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = delay_init &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f7]"></a>delay_ms</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, delay.o(i.delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetFlagStatus
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaveinfo
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Hardware_Reset
</UL>

<P><STRONG><a name="[fb]"></a>dtype2string</STRONG> (Thumb, 330 bytes, Stack size 8 bytes, slaveinfo.o(i.dtype2string))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = dtype2string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si_siiPDO
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si_PDOassign
</UL>

<P><STRONG><a name="[17e]"></a>ec_ALstatuscode2string</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ethercatprint.o(i.ec_ALstatuscode2string))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ec_ALstatuscode2string
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaveinfo
</UL>

<P><STRONG><a name="[d3]"></a>ec_SDOread</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, ethercatcoe.o(i.ec_SDOread))
<BR><BR>[Stack]<UL><LI>Max Depth = 3472<LI>Call Chain = ec_SDOread &rArr; ecx_SDOread &rArr; ecx_mbxsend &rArr; ecx_mbxempty &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; EtherCat_MACRAW_Recv &rArr; wiz_recv_data &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_SDOread
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si_map_sdo
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si_PDOassign
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDO2string
</UL>

<P><STRONG><a name="[fd]"></a>ec_clearmbx</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ethercatmain.o(i.ec_clearmbx))
<BR><BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readOEsingle
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readODlist
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readODdescription
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_SDOread
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_SoEread
</UL>

<P><STRONG><a name="[fe]"></a>ec_close</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ethercatmain.o(i.ec_close))
<BR><BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_close
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaveinfo
</UL>

<P><STRONG><a name="[100]"></a>ec_config</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ethercatconfig.o(i.ec_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 3840 + Unknown Stack Size
<LI>Call Chain = ec_config &rArr; ec_config_map &rArr; ec_config_map_group &rArr; ecx_config_map_group &rArr; ecx_config_find_mappings &rArr; ecx_map_sii &rArr; ecx_siiPDO &rArr; ecx_siifind &rArr; ecx_siigetbyte &rArr; ecx_readeepromFP &rArr; ecx_eeprom_waitnotbusyFP &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; EtherCat_MACRAW_Recv &rArr; wiz_recv_data &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_config_map
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_config_init
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaveinfo
</UL>

<P><STRONG><a name="[101]"></a>ec_config_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ethercatconfig.o(i.ec_config_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = ec_config_init &rArr; ecx_config_init &rArr; ecx_siistring &rArr; ecx_siifind &rArr; ecx_siigetbyte &rArr; ecx_readeepromFP &rArr; ecx_eeprom_waitnotbusyFP &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; EtherCat_MACRAW_Recv &rArr; wiz_recv_data &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_init
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_config
</UL>

<P><STRONG><a name="[102]"></a>ec_config_map</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ethercatconfig.o(i.ec_config_map))
<BR><BR>[Stack]<UL><LI>Max Depth = 3824<LI>Call Chain = ec_config_map &rArr; ec_config_map_group &rArr; ecx_config_map_group &rArr; ecx_config_find_mappings &rArr; ecx_map_sii &rArr; ecx_siiPDO &rArr; ecx_siifind &rArr; ecx_siigetbyte &rArr; ecx_readeepromFP &rArr; ecx_eeprom_waitnotbusyFP &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; EtherCat_MACRAW_Recv &rArr; wiz_recv_data &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_config_map_group
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_config
</UL>

<P><STRONG><a name="[104]"></a>ec_config_map_group</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ethercatconfig.o(i.ec_config_map_group))
<BR><BR>[Stack]<UL><LI>Max Depth = 3824<LI>Call Chain = ec_config_map_group &rArr; ecx_config_map_group &rArr; ecx_config_find_mappings &rArr; ecx_map_sii &rArr; ecx_siiPDO &rArr; ecx_siifind &rArr; ecx_siigetbyte &rArr; ecx_readeepromFP &rArr; ecx_eeprom_waitnotbusyFP &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; EtherCat_MACRAW_Recv &rArr; wiz_recv_data &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_map_group
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_config_map
</UL>

<P><STRONG><a name="[106]"></a>ec_configdc</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ethercatdc.o(i.ec_configdc))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = ec_configdc &rArr; ecx_configdc &rArr; ecx_FPWR &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; EtherCat_MACRAW_Recv &rArr; wiz_recv_data &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_configdc
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaveinfo
</UL>

<P><STRONG><a name="[108]"></a>ec_eeprom2pdi</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ethercatmain.o(i.ec_eeprom2pdi))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = ec_eeprom2pdi &rArr; ecx_eeprom2pdi &rArr; ecx_FPWR &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; EtherCat_MACRAW_Recv &rArr; wiz_recv_data &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_eeprom2pdi
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si_siiPDO
</UL>

<P><STRONG><a name="[d4]"></a>ec_elist2string</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ethercatprint.o(i.ec_elist2string))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = ec_elist2string &rArr; ecx_elist2string &rArr; ecx_err2string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_elist2string
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaveinfo
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si_sdo
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDO2string
</UL>

<P><STRONG><a name="[148]"></a>ec_findconfig</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ethercatconfig.o(i.ec_findconfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ec_findconfig
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_from_table
</UL>

<P><STRONG><a name="[10b]"></a>ec_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ethercatmain.o(i.ec_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ec_init &rArr; ecx_init &rArr; ecx_setupnic &rArr; EtherCat_MACRAW_Open &rArr; socket &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_init
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaveinfo
</UL>

<P><STRONG><a name="[160]"></a>ec_mbxerror2string</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ethercatprint.o(i.ec_mbxerror2string))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ec_mbxerror2string
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_err2string
</UL>

<P><STRONG><a name="[138]"></a>ec_nextmbxcnt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ethercatmain.o(i.ec_nextmbxcnt))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readOEsingle
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readODlist
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readODdescription
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_SDOread
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_SoEread
</UL>

<P><STRONG><a name="[10d]"></a>ec_readODdescription</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ethercatcoe.o(i.ec_readODdescription))
<BR><BR>[Stack]<UL><LI>Max Depth = 3416<LI>Call Chain = ec_readODdescription &rArr; ecx_readODdescription &rArr; ecx_mbxsend &rArr; ecx_mbxempty &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; EtherCat_MACRAW_Recv &rArr; wiz_recv_data &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readODdescription
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si_sdo
</UL>

<P><STRONG><a name="[10f]"></a>ec_readODlist</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ethercatcoe.o(i.ec_readODlist))
<BR><BR>[Stack]<UL><LI>Max Depth = 3432<LI>Call Chain = ec_readODlist &rArr; ecx_readODlist &rArr; ecx_mbxsend &rArr; ecx_mbxempty &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; EtherCat_MACRAW_Recv &rArr; wiz_recv_data &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readODlist
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si_sdo
</UL>

<P><STRONG><a name="[111]"></a>ec_readOE</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ethercatcoe.o(i.ec_readOE))
<BR><BR>[Stack]<UL><LI>Max Depth = 3448<LI>Call Chain = ec_readOE &rArr; ecx_readOE &rArr; ecx_readOEsingle &rArr; ecx_mbxsend &rArr; ecx_mbxempty &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; EtherCat_MACRAW_Recv &rArr; wiz_recv_data &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readOE
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si_sdo
</UL>

<P><STRONG><a name="[113]"></a>ec_readOEsingle</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ethercatcoe.o(i.ec_readOEsingle))
<BR><BR>[Stack]<UL><LI>Max Depth = 3424<LI>Call Chain = ec_readOEsingle &rArr; ecx_readOEsingle &rArr; ecx_mbxsend &rArr; ecx_mbxempty &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; EtherCat_MACRAW_Recv &rArr; wiz_recv_data &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readOEsingle
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si_PDOassign
</UL>

<P><STRONG><a name="[115]"></a>ec_readstate</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ethercatmain.o(i.ec_readstate))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136<LI>Call Chain = ec_readstate &rArr; ecx_readstate &rArr; ecx_FPRD_multi &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; EtherCat_MACRAW_Recv &rArr; wiz_recv_data &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readstate
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaveinfo
</UL>

<P><STRONG><a name="[15e]"></a>ec_sdoerror2string</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ethercatprint.o(i.ec_sdoerror2string))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ec_sdoerror2string
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_err2string
</UL>

<P><STRONG><a name="[117]"></a>ec_setupheader</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, nicdrv.o(i.ec_setupheader))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ec_setupheader
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oshw_htons
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_setupnic
</UL>

<P><STRONG><a name="[119]"></a>ec_siifind</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ethercatmain.o(i.ec_siifind))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = ec_siifind &rArr; ecx_siifind &rArr; ecx_siigetbyte &rArr; ecx_readeepromFP &rArr; ecx_eeprom_waitnotbusyFP &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; EtherCat_MACRAW_Recv &rArr; wiz_recv_data &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siifind
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaveinfo
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si_siiPDO
</UL>

<P><STRONG><a name="[11b]"></a>ec_siigetbyte</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ethercatmain.o(i.ec_siigetbyte))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = ec_siigetbyte &rArr; ecx_siigetbyte &rArr; ecx_readeepromFP &rArr; ecx_eeprom_waitnotbusyFP &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; EtherCat_MACRAW_Recv &rArr; wiz_recv_data &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siigetbyte
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaveinfo
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si_siiPDO
</UL>

<P><STRONG><a name="[11d]"></a>ec_siistring</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ethercatmain.o(i.ec_siistring))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = ec_siistring &rArr; ecx_siistring &rArr; ecx_siifind &rArr; ecx_siigetbyte &rArr; ecx_readeepromFP &rArr; ecx_eeprom_waitnotbusyFP &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; EtherCat_MACRAW_Recv &rArr; wiz_recv_data &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siistring
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si_siiPDO
</UL>

<P><STRONG><a name="[15f]"></a>ec_soeerror2string</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ethercatprint.o(i.ec_soeerror2string))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ec_soeerror2string
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_err2string
</UL>

<P><STRONG><a name="[11f]"></a>ec_statecheck</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ethercatmain.o(i.ec_statecheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = ec_statecheck &rArr; ecx_statecheck &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; EtherCat_MACRAW_Recv &rArr; wiz_recv_data &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_statecheck
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaveinfo
</UL>

<P><STRONG><a name="[121]"></a>ecx_APRD</STRONG> (Thumb, 108 bytes, Stack size 48 bytes, ethercatbase.o(i.ecx_APRD))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = ecx_APRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; EtherCat_MACRAW_Recv &rArr; wiz_recv_data &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_setupdatagram
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_srconfirm
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_setbufstat
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_getindex
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_APRDw
</UL>

<P><STRONG><a name="[127]"></a>ecx_APRDw</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, ethercatbase.o(i.ecx_APRDw))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = ecx_APRDw &rArr; ecx_APRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; EtherCat_MACRAW_Recv &rArr; wiz_recv_data &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_APRD
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_init
</UL>

<P><STRONG><a name="[128]"></a>ecx_APWR</STRONG> (Thumb, 88 bytes, Stack size 48 bytes, ethercatbase.o(i.ecx_APWR))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = ecx_APWR &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; EtherCat_MACRAW_Recv &rArr; wiz_recv_data &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_setupdatagram
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_srconfirm
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_setbufstat
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_getindex
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_APWRw
</UL>

<P><STRONG><a name="[129]"></a>ecx_APWRw</STRONG> (Thumb, 22 bytes, Stack size 32 bytes, ethercatbase.o(i.ecx_APWRw))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = ecx_APWRw &rArr; ecx_APWR &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; EtherCat_MACRAW_Recv &rArr; wiz_recv_data &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_APWR
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_init
</UL>

<P><STRONG><a name="[12a]"></a>ecx_BRD</STRONG> (Thumb, 108 bytes, Stack size 48 bytes, ethercatbase.o(i.ecx_BRD))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = ecx_BRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; EtherCat_MACRAW_Recv &rArr; wiz_recv_data &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_setupdatagram
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_srconfirm
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_setbufstat
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_getindex
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readstate
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_statecheck
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_detect_slaves
</UL>

<P><STRONG><a name="[12b]"></a>ecx_BWR</STRONG> (Thumb, 88 bytes, Stack size 48 bytes, ethercatbase.o(i.ecx_BWR))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = ecx_BWR &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; EtherCat_MACRAW_Recv &rArr; wiz_recv_data &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_setupdatagram
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_srconfirm
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_setbufstat
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_getindex
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_configdc
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_detect_slaves
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_set_slaves_to_default
</UL>

<P><STRONG><a name="[12c]"></a>ecx_FPRD</STRONG> (Thumb, 108 bytes, Stack size 48 bytes, ethercatbase.o(i.ecx_FPRD))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; EtherCat_MACRAW_Recv &rArr; wiz_recv_data &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_setupdatagram
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_srconfirm
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_setbufstat
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_getindex
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_mbxreceive
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPRDw
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readeepromFP
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_mbxempty
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_eeprom_waitnotbusyFP
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_configdc
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_statecheck
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readeeprom2
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_init
</UL>

<P><STRONG><a name="[12d]"></a>ecx_FPRD_multi</STRONG> (Thumb, 270 bytes, Stack size 320 bytes, ethercatmain.o(i.ecx_FPRD_multi))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = ecx_FPRD_multi &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; EtherCat_MACRAW_Recv &rArr; wiz_recv_data &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_setupdatagram
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_adddatagram
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_srconfirm
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_setbufstat
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_getindex
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readstate
</UL>

<P><STRONG><a name="[12f]"></a>ecx_FPRDw</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, ethercatbase.o(i.ecx_FPRDw))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = ecx_FPRDw &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; EtherCat_MACRAW_Recv &rArr; wiz_recv_data &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPRD
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_init
</UL>

<P><STRONG><a name="[130]"></a>ecx_FPWR</STRONG> (Thumb, 88 bytes, Stack size 48 bytes, ethercatbase.o(i.ecx_FPWR))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = ecx_FPWR &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; EtherCat_MACRAW_Recv &rArr; wiz_recv_data &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_setupdatagram
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_srconfirm
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_setbufstat
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_getindex
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_mbxsend
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_mbxreceive
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPWRw
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readeepromFP
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_configdc
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readeeprom1
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_eeprom2pdi
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_eeprom2master
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_init
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_map_sm
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_create_output_mappings
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_create_input_mappings
</UL>

<P><STRONG><a name="[131]"></a>ecx_FPWRw</STRONG> (Thumb, 22 bytes, Stack size 32 bytes, ethercatbase.o(i.ecx_FPWRw))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = ecx_FPWRw &rArr; ecx_FPWR &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; EtherCat_MACRAW_Recv &rArr; wiz_recv_data &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPWR
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_map_group
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_init
</UL>

<P><STRONG><a name="[132]"></a>ecx_SDOerror</STRONG> (Thumb, 82 bytes, Stack size 56 bytes, ethercatcoe.o(i.ecx_SDOerror))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ecx_SDOerror &rArr; ecx_pusherror &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_pusherror
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_current_time
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_SDOread
</UL>

<P><STRONG><a name="[fc]"></a>ecx_SDOread</STRONG> (Thumb, 784 bytes, Stack size 3040 bytes, ethercatcoe.o(i.ecx_SDOread))
<BR><BR>[Stack]<UL><LI>Max Depth = 3440<LI>Call Chain = ecx_SDOread &rArr; ecx_mbxsend &rArr; ecx_mbxempty &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; EtherCat_MACRAW_Recv &rArr; wiz_recv_data &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_packeterror
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_mbxsend
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_mbxreceive
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_nextmbxcnt
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_clearmbx
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_SDOerror
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readPDOmapCA
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readPDOmap
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readPDOassignCA
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readPDOassign
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_SDOread
</UL>

<P><STRONG><a name="[13b]"></a>ecx_SoEerror</STRONG> (Thumb, 76 bytes, Stack size 56 bytes, ethercatsoe.o(i.ecx_SoEerror))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ecx_SoEerror &rArr; ecx_pusherror &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_pusherror
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_current_time
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_SoEread
</UL>

<P><STRONG><a name="[13c]"></a>ecx_SoEread</STRONG> (Thumb, 448 bytes, Stack size 3032 bytes, ethercatsoe.o(i.ecx_SoEread))
<BR><BR>[Stack]<UL><LI>Max Depth = 3432<LI>Call Chain = ecx_SoEread &rArr; ecx_mbxsend &rArr; ecx_mbxempty &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; EtherCat_MACRAW_Recv &rArr; wiz_recv_data &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_packeterror
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_mbxsend
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_mbxreceive
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_nextmbxcnt
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_clearmbx
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_SoEerror
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readIDNmap
</UL>

<P><STRONG><a name="[12e]"></a>ecx_adddatagram</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, ethercatbase.o(i.ecx_adddatagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ecx_adddatagram
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_writedatagramdata
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPRD_multi
</UL>

<P><STRONG><a name="[ff]"></a>ecx_close</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ethercatmain.o(i.ecx_close))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_close
</UL>

<P><STRONG><a name="[13e]"></a>ecx_closenic</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, nicdrv.o(i.ecx_closenic), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EtherCat_Close
</UL>

<P><STRONG><a name="[103]"></a>ecx_config_init</STRONG> (Thumb, 1856 bytes, Stack size 72 bytes, ethercatconfig.o(i.ecx_config_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = ecx_config_init &rArr; ecx_siistring &rArr; ecx_siifind &rArr; ecx_siigetbyte &rArr; ecx_readeepromFP &rArr; ecx_eeprom_waitnotbusyFP &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; EtherCat_MACRAW_Recv &rArr; wiz_recv_data &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPWRw
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPWR
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPRDw
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPRD
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_APWRw
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_APRDw
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_statecheck
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siistring
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siigetbyte
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siifind
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siiSMnext
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siiSM
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siiFMMU
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readeeprom2
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readeeprom1
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_eeprom2pdi
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_init_context
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_detect_slaves
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_set_slaves_to_default
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_lookup_prev_sii
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_from_table
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_config_init
</UL>

<P><STRONG><a name="[105]"></a>ecx_config_map_group</STRONG> (Thumb, 772 bytes, Stack size 80 bytes, ethercatconfig.o(i.ecx_config_map_group))
<BR><BR>[Stack]<UL><LI>Max Depth = 3824<LI>Call Chain = ecx_config_map_group &rArr; ecx_config_find_mappings &rArr; ecx_map_sii &rArr; ecx_siiPDO &rArr; ecx_siifind &rArr; ecx_siigetbyte &rArr; ecx_readeepromFP &rArr; ecx_eeprom_waitnotbusyFP &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; EtherCat_MACRAW_Recv &rArr; wiz_recv_data &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPWRw
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_eeprom2pdi
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_find_mappings
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_create_output_mappings
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_create_input_mappings
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_config_map_group
</UL>

<P><STRONG><a name="[107]"></a>ecx_configdc</STRONG> (Thumb, 1154 bytes, Stack size 128 bytes, ethercatdc.o(i.ecx_configdc))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = ecx_configdc &rArr; ecx_FPWR &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; EtherCat_MACRAW_Recv &rArr; wiz_recv_data &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPWR
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPRD
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_BWR
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_current_time
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_prevport
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_porttime
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_parentport
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_configdc
</UL>

<P><STRONG><a name="[14a]"></a>ecx_detect_slaves</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, ethercatconfig.o(i.ecx_detect_slaves))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = ecx_detect_slaves &rArr; ecx_BWR &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; EtherCat_MACRAW_Recv &rArr; wiz_recv_data &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_BWR
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_BRD
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_init
</UL>

<P><STRONG><a name="[155]"></a>ecx_eeprom2master</STRONG> (Thumb, 134 bytes, Stack size 48 bytes, ethercatmain.o(i.ecx_eeprom2master))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = ecx_eeprom2master &rArr; ecx_FPWR &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; EtherCat_MACRAW_Recv &rArr; wiz_recv_data &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPWR
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siigetbyte
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readeeprom1
</UL>

<P><STRONG><a name="[109]"></a>ecx_eeprom2pdi</STRONG> (Thumb, 92 bytes, Stack size 48 bytes, ethercatmain.o(i.ecx_eeprom2pdi))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = ecx_eeprom2pdi &rArr; ecx_FPWR &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; EtherCat_MACRAW_Recv &rArr; wiz_recv_data &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPWR
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_eeprom2pdi
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siistring
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siifind
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siiSMnext
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siiSM
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siiPDO
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siiFMMU
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_map_group
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_init
</UL>

<P><STRONG><a name="[156]"></a>ecx_eeprom_waitnotbusyFP</STRONG> (Thumb, 100 bytes, Stack size 56 bytes, ethercatmain.o(i.ecx_eeprom_waitnotbusyFP))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = ecx_eeprom_waitnotbusyFP &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; EtherCat_MACRAW_Recv &rArr; wiz_recv_data &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPRD
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_usleep
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_timer_start
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_timer_is_expired
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readeepromFP
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readeeprom2
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readeeprom1
</UL>

<P><STRONG><a name="[10a]"></a>ecx_elist2string</STRONG> (Thumb, 36 bytes, Stack size 40 bytes, ethercatprint.o(i.ecx_elist2string))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = ecx_elist2string &rArr; ecx_err2string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_poperror
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_err2string
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_elist2string
</UL>

<P><STRONG><a name="[15a]"></a>ecx_err2string</STRONG> (Thumb, 274 bytes, Stack size 80 bytes, ethercatprint.o(i.ecx_err2string))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = ecx_err2string &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_soeerror2string
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_sdoerror2string
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_mbxerror2string
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_elist2string
</UL>

<P><STRONG><a name="[122]"></a>ecx_getindex</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, nicdrv.o(i.ecx_getindex))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ecx_getindex
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPWR
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPRD
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_BWR
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_BRD
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_APWR
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_APRD
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPRD_multi
</UL>

<P><STRONG><a name="[161]"></a>ecx_inframe</STRONG> (Thumb, 266 bytes, Stack size 40 bytes, nicdrv.o(i.ecx_inframe))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ecx_inframe &rArr; ecx_recvpkt &rArr; EtherCat_MACRAW_Recv &rArr; wiz_recv_data &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oshw_ntohs
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oshw_htons
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_recvpkt
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_waitinframe_red
</UL>

<P><STRONG><a name="[10c]"></a>ecx_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ethercatmain.o(i.ecx_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ecx_init &rArr; ecx_setupnic &rArr; EtherCat_MACRAW_Open &rArr; socket &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_setupnic
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_init
</UL>

<P><STRONG><a name="[149]"></a>ecx_init_context</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, ethercatconfig.o(i.ecx_init_context))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = ecx_init_context &rArr; ecx_siigetbyte &rArr; ecx_readeepromFP &rArr; ecx_eeprom_waitnotbusyFP &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; EtherCat_MACRAW_Recv &rArr; wiz_recv_data &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siigetbyte
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_init
</UL>

<P><STRONG><a name="[16b]"></a>ecx_mbxempty</STRONG> (Thumb, 136 bytes, Stack size 56 bytes, ethercatmain.o(i.ecx_mbxempty))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = ecx_mbxempty &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; EtherCat_MACRAW_Recv &rArr; wiz_recv_data &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPRD
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_usleep
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_timer_start
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_timer_is_expired
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_mbxsend
</UL>

<P><STRONG><a name="[137]"></a>ecx_mbxreceive</STRONG> (Thumb, 498 bytes, Stack size 96 bytes, ethercatmain.o(i.ecx_mbxreceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = ecx_mbxreceive &rArr; ecx_FPWR &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; EtherCat_MACRAW_Recv &rArr; wiz_recv_data &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPWR
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPRD
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_usleep
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_timer_start
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_timer_is_expired
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_mbxerror
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_mbxemergencyerror
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readOEsingle
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readODlist
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readODdescription
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_SDOread
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_SoEread
</UL>

<P><STRONG><a name="[139]"></a>ecx_mbxsend</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, ethercatmain.o(i.ecx_mbxsend))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = ecx_mbxsend &rArr; ecx_mbxempty &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; EtherCat_MACRAW_Recv &rArr; wiz_recv_data &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPWR
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_mbxempty
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readOEsingle
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readODlist
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readODdescription
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_SDOread
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_SoEread
</UL>

<P><STRONG><a name="[16d]"></a>ecx_outframe</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, nicdrv.o(i.ecx_outframe))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ecx_outframe &rArr; EtherCat_MACRAW_Send &rArr; wiz_send_data &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EtherCat_MACRAW_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_outframe_red
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_waitinframe_red
</UL>

<P><STRONG><a name="[16e]"></a>ecx_outframe_red</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, nicdrv.o(i.ecx_outframe_red))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ecx_outframe_red &rArr; ecx_outframe &rArr; EtherCat_MACRAW_Send &rArr; wiz_send_data &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oshw_htons
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_outframe
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_srconfirm
</UL>

<P><STRONG><a name="[13a]"></a>ecx_packeterror</STRONG> (Thumb, 82 bytes, Stack size 56 bytes, ethercatmain.o(i.ecx_packeterror))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ecx_packeterror &rArr; ecx_pusherror &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_pusherror
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_current_time
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readPDOmapCA
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readOEsingle
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readODlist
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readODdescription
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_SDOread
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_SoEread
</UL>

<P><STRONG><a name="[159]"></a>ecx_poperror</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, ethercatmain.o(i.ecx_poperror))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ecx_poperror &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_elist2string
</UL>

<P><STRONG><a name="[135]"></a>ecx_pusherror</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, ethercatmain.o(i.ecx_pusherror))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ecx_pusherror &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_packeterror
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_SDOerror
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_SDOinfoerror
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_mbxerror
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_mbxemergencyerror
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_SoEerror
</UL>

<P><STRONG><a name="[167]"></a>ecx_readIDNmap</STRONG> (Thumb, 318 bytes, Stack size 216 bytes, ethercatsoe.o(i.ecx_readIDNmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 3648<LI>Call Chain = ecx_readIDNmap &rArr; ecx_SoEread &rArr; ecx_mbxsend &rArr; ecx_mbxempty &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; EtherCat_MACRAW_Recv &rArr; wiz_recv_data &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_SoEread
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_map_coe_soe
</UL>

<P><STRONG><a name="[10e]"></a>ecx_readODdescription</STRONG> (Thumb, 366 bytes, Stack size 3016 bytes, ethercatcoe.o(i.ecx_readODdescription))
<BR><BR>[Stack]<UL><LI>Max Depth = 3416<LI>Call Chain = ecx_readODdescription &rArr; ecx_mbxsend &rArr; ecx_mbxempty &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; EtherCat_MACRAW_Recv &rArr; wiz_recv_data &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_packeterror
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_mbxsend
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_mbxreceive
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_nextmbxcnt
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_clearmbx
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_SDOinfoerror
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_readODdescription
</UL>

<P><STRONG><a name="[110]"></a>ecx_readODlist</STRONG> (Thumb, 454 bytes, Stack size 3032 bytes, ethercatcoe.o(i.ecx_readODlist))
<BR><BR>[Stack]<UL><LI>Max Depth = 3432<LI>Call Chain = ecx_readODlist &rArr; ecx_mbxsend &rArr; ecx_mbxempty &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; EtherCat_MACRAW_Recv &rArr; wiz_recv_data &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_packeterror
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_mbxsend
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_mbxreceive
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_nextmbxcnt
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_clearmbx
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_SDOinfoerror
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_readODlist
</UL>

<P><STRONG><a name="[112]"></a>ecx_readOE</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, ethercatcoe.o(i.ecx_readOE))
<BR><BR>[Stack]<UL><LI>Max Depth = 3448<LI>Call Chain = ecx_readOE &rArr; ecx_readOEsingle &rArr; ecx_mbxsend &rArr; ecx_mbxempty &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; EtherCat_MACRAW_Recv &rArr; wiz_recv_data &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readOEsingle
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_readOE
</UL>

<P><STRONG><a name="[114]"></a>ecx_readOEsingle</STRONG> (Thumb, 382 bytes, Stack size 3016 bytes, ethercatcoe.o(i.ecx_readOEsingle))
<BR><BR>[Stack]<UL><LI>Max Depth = 3416<LI>Call Chain = ecx_readOEsingle &rArr; ecx_mbxsend &rArr; ecx_mbxempty &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; EtherCat_MACRAW_Recv &rArr; wiz_recv_data &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_packeterror
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_mbxsend
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_mbxreceive
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_nextmbxcnt
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_clearmbx
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_SDOinfoerror
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readOE
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_readOEsingle
</UL>

<P><STRONG><a name="[16f]"></a>ecx_readPDOassign</STRONG> (Thumb, 226 bytes, Stack size 88 bytes, ethercatcoe.o(i.ecx_readPDOassign))
<BR><BR>[Stack]<UL><LI>Max Depth = 3528<LI>Call Chain = ecx_readPDOassign &rArr; ecx_SDOread &rArr; ecx_mbxsend &rArr; ecx_mbxempty &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; EtherCat_MACRAW_Recv &rArr; wiz_recv_data &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_SDOread
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readPDOmap
</UL>

<P><STRONG><a name="[170]"></a>ecx_readPDOassignCA</STRONG> (Thumb, 206 bytes, Stack size 72 bytes, ethercatcoe.o(i.ecx_readPDOassignCA))
<BR><BR>[Stack]<UL><LI>Max Depth = 3512<LI>Call Chain = ecx_readPDOassignCA &rArr; ecx_SDOread &rArr; ecx_mbxsend &rArr; ecx_mbxempty &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; EtherCat_MACRAW_Recv &rArr; wiz_recv_data &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_SDOread
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readPDOmapCA
</UL>

<P><STRONG><a name="[166]"></a>ecx_readPDOmap</STRONG> (Thumb, 364 bytes, Stack size 88 bytes, ethercatcoe.o(i.ecx_readPDOmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 3616<LI>Call Chain = ecx_readPDOmap &rArr; ecx_readPDOassign &rArr; ecx_SDOread &rArr; ecx_mbxsend &rArr; ecx_mbxempty &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; EtherCat_MACRAW_Recv &rArr; wiz_recv_data &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readPDOassign
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_SDOread
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_map_coe_soe
</UL>

<P><STRONG><a name="[165]"></a>ecx_readPDOmapCA</STRONG> (Thumb, 314 bytes, Stack size 80 bytes, ethercatcoe.o(i.ecx_readPDOmapCA))
<BR><BR>[Stack]<UL><LI>Max Depth = 3592<LI>Call Chain = ecx_readPDOmapCA &rArr; ecx_readPDOassignCA &rArr; ecx_SDOread &rArr; ecx_mbxsend &rArr; ecx_mbxempty &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; EtherCat_MACRAW_Recv &rArr; wiz_recv_data &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_packeterror
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readPDOassignCA
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_SDOread
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_map_coe_soe
</UL>

<P><STRONG><a name="[14c]"></a>ecx_readeeprom1</STRONG> (Thumb, 156 bytes, Stack size 48 bytes, ethercatmain.o(i.ecx_readeeprom1))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = ecx_readeeprom1 &rArr; ecx_eeprom_waitnotbusyFP &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; EtherCat_MACRAW_Recv &rArr; wiz_recv_data &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPWR
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_eeprom_waitnotbusyFP
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_eeprom2master
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_init
</UL>

<P><STRONG><a name="[14d]"></a>ecx_readeeprom2</STRONG> (Thumb, 94 bytes, Stack size 48 bytes, ethercatmain.o(i.ecx_readeeprom2))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = ecx_readeeprom2 &rArr; ecx_eeprom_waitnotbusyFP &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; EtherCat_MACRAW_Recv &rArr; wiz_recv_data &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPRD
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_eeprom_waitnotbusyFP
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_init
</UL>

<P><STRONG><a name="[171]"></a>ecx_readeepromFP</STRONG> (Thumb, 284 bytes, Stack size 88 bytes, ethercatmain.o(i.ecx_readeepromFP))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = ecx_readeepromFP &rArr; ecx_eeprom_waitnotbusyFP &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; EtherCat_MACRAW_Recv &rArr; wiz_recv_data &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPWR
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPRD
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_usleep
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_eeprom_waitnotbusyFP
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siigetbyte
</UL>

<P><STRONG><a name="[116]"></a>ecx_readstate</STRONG> (Thumb, 382 bytes, Stack size 560 bytes, ethercatmain.o(i.ecx_readstate))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136<LI>Call Chain = ecx_readstate &rArr; ecx_FPRD_multi &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; EtherCat_MACRAW_Recv &rArr; wiz_recv_data &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_BRD
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPRD_multi
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_readstate
</UL>

<P><STRONG><a name="[126]"></a>ecx_setbufstat</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, nicdrv.o(i.ecx_setbufstat))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPWR
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPRD
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_BWR
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_BRD
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_APWR
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_APRD
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_srconfirm
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPRD_multi
</UL>

<P><STRONG><a name="[123]"></a>ecx_setupdatagram</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, ethercatbase.o(i.ecx_setupdatagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ecx_setupdatagram
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_writedatagramdata
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPWR
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPRD
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_BWR
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_BRD
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_APWR
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_APRD
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPRD_multi
</UL>

<P><STRONG><a name="[164]"></a>ecx_setupnic</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, nicdrv.o(i.ecx_setupnic))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ecx_setupnic &rArr; EtherCat_MACRAW_Open &rArr; socket &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EtherCat_MACRAW_Open
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_setupheader
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_clear_rxbufstat
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_init
</UL>

<P><STRONG><a name="[151]"></a>ecx_siiFMMU</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, ethercatmain.o(i.ecx_siiFMMU))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = ecx_siiFMMU &rArr; ecx_siifind &rArr; ecx_siigetbyte &rArr; ecx_readeepromFP &rArr; ecx_eeprom_waitnotbusyFP &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; EtherCat_MACRAW_Recv &rArr; wiz_recv_data &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siigetbyte
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siifind
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_eeprom2pdi
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_init
</UL>

<P><STRONG><a name="[169]"></a>ecx_siiPDO</STRONG> (Thumb, 428 bytes, Stack size 56 bytes, ethercatmain.o(i.ecx_siiPDO))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = ecx_siiPDO &rArr; ecx_siifind &rArr; ecx_siigetbyte &rArr; ecx_readeepromFP &rArr; ecx_eeprom_waitnotbusyFP &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; EtherCat_MACRAW_Recv &rArr; wiz_recv_data &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siigetbyte
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siifind
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_eeprom2pdi
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_map_sii
</UL>

<P><STRONG><a name="[14f]"></a>ecx_siiSM</STRONG> (Thumb, 264 bytes, Stack size 32 bytes, ethercatmain.o(i.ecx_siiSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = ecx_siiSM &rArr; ecx_siifind &rArr; ecx_siigetbyte &rArr; ecx_readeepromFP &rArr; ecx_eeprom_waitnotbusyFP &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; EtherCat_MACRAW_Recv &rArr; wiz_recv_data &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siigetbyte
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siifind
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_eeprom2pdi
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_init
</UL>

<P><STRONG><a name="[150]"></a>ecx_siiSMnext</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, ethercatmain.o(i.ecx_siiSMnext))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = ecx_siiSMnext &rArr; ecx_siigetbyte &rArr; ecx_readeepromFP &rArr; ecx_eeprom_waitnotbusyFP &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; EtherCat_MACRAW_Recv &rArr; wiz_recv_data &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siigetbyte
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_eeprom2pdi
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_init
</UL>

<P><STRONG><a name="[11a]"></a>ecx_siifind</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, ethercatmain.o(i.ecx_siifind))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = ecx_siifind &rArr; ecx_siigetbyte &rArr; ecx_readeepromFP &rArr; ecx_eeprom_waitnotbusyFP &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; EtherCat_MACRAW_Recv &rArr; wiz_recv_data &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siigetbyte
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_eeprom2pdi
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_siifind
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siistring
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siiSM
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siiPDO
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siiFMMU
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_init
</UL>

<P><STRONG><a name="[11c]"></a>ecx_siigetbyte</STRONG> (Thumb, 220 bytes, Stack size 40 bytes, ethercatmain.o(i.ecx_siigetbyte))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = ecx_siigetbyte &rArr; ecx_readeepromFP &rArr; ecx_eeprom_waitnotbusyFP &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; EtherCat_MACRAW_Recv &rArr; wiz_recv_data &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readeepromFP
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_eeprom2master
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_siigetbyte
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siistring
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siifind
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siiSMnext
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siiSM
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siiPDO
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siiFMMU
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_init_context
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_init
</UL>

<P><STRONG><a name="[11e]"></a>ecx_siistring</STRONG> (Thumb, 184 bytes, Stack size 56 bytes, ethercatmain.o(i.ecx_siistring))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = ecx_siistring &rArr; ecx_siifind &rArr; ecx_siigetbyte &rArr; ecx_readeepromFP &rArr; ecx_eeprom_waitnotbusyFP &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; EtherCat_MACRAW_Recv &rArr; wiz_recv_data &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siigetbyte
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siifind
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_eeprom2pdi
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_siistring
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_init
</UL>

<P><STRONG><a name="[124]"></a>ecx_srconfirm</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, nicdrv.o(i.ecx_srconfirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; EtherCat_MACRAW_Recv &rArr; wiz_recv_data &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_setbufstat
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_outframe_red
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_waitinframe_red
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_timer_start
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_timer_is_expired
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPWR
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPRD
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_BWR
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_BRD
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_APWR
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_APRD
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPRD_multi
</UL>

<P><STRONG><a name="[120]"></a>ecx_statecheck</STRONG> (Thumb, 190 bytes, Stack size 64 bytes, ethercatmain.o(i.ecx_statecheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = ecx_statecheck &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; EtherCat_MACRAW_Recv &rArr; wiz_recv_data &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPRD
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_BRD
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_usleep
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_timer_start
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_timer_is_expired
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_statecheck
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_map_coe_soe
</UL>

<P><STRONG><a name="[64]"></a>fputc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usart.o(i.fputc))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[177]"></a>getSec</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timer.o(i.getSec))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_current_time
</UL>

<P><STRONG><a name="[ca]"></a>getSn_RX_RSR</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, w5500.o(i.getSn_RX_RSR))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = getSn_RX_RSR &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EtherCat_MACRAW_Recv
</UL>

<P><STRONG><a name="[178]"></a>getuSec</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, timer.o(i.getuSec))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_current_time
</UL>

<P><STRONG><a name="[95]"></a>main</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, slaveinfo.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 3904 + Unknown Stack Size
<LI>Call Chain = main &rArr; slaveinfo &rArr; si_map_sii &rArr; si_siiPDO &rArr; ec_siistring &rArr; ecx_siistring &rArr; ecx_siifind &rArr; ecx_siigetbyte &rArr; ecx_readeepromFP &rArr; ecx_eeprom_waitnotbusyFP &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; EtherCat_MACRAW_Recv &rArr; wiz_recv_data &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2And3_start
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2And3_Init
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaveinfo
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_init
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_RegSetup
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[134]"></a>osal_current_time</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, osal.o(i.osal_current_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osal_current_time
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getuSec
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSec
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_packeterror
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_SDOerror
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_timer_start
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_timer_is_expired
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_mbxerror
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_mbxemergencyerror
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_configdc
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_SoEerror
</UL>

<P><STRONG><a name="[158]"></a>osal_timer_is_expired</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, osal.o(i.osal_timer_is_expired))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = osal_timer_is_expired &rArr; osal_current_time
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_current_time
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_mbxreceive
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_srconfirm
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_waitinframe_red
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_usleep
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_mbxempty
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_eeprom_waitnotbusyFP
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_statecheck
</UL>

<P><STRONG><a name="[157]"></a>osal_timer_start</STRONG> (Thumb, 96 bytes, Stack size 56 bytes, osal.o(i.osal_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = osal_timer_start &rArr; osal_current_time
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_current_time
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_mbxreceive
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_srconfirm
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_waitinframe_red
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_usleep
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_mbxempty
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_eeprom_waitnotbusyFP
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_statecheck
</UL>

<P><STRONG><a name="[144]"></a>osal_usleep</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, osal.o(i.osal_usleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = osal_usleep &rArr; osal_timer_start &rArr; osal_current_time
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_timer_start
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_timer_is_expired
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_mbxreceive
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readeepromFP
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_mbxempty
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_eeprom_waitnotbusyFP
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_statecheck
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_find_mappings
</UL>

<P><STRONG><a name="[118]"></a>oshw_htons</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, oshw.o(i.oshw_htons))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_outframe_red
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_inframe
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_setupheader
</UL>

<P><STRONG><a name="[163]"></a>oshw_ntohs</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, oshw.o(i.oshw_ntohs))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_inframe
</UL>

<P><STRONG><a name="[184]"></a>reg_wizchip_cris_cbfunc</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, wizchip_conf.o(i.reg_wizchip_cris_cbfunc))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_init
</UL>

<P><STRONG><a name="[185]"></a>reg_wizchip_cs_cbfunc</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, wizchip_conf.o(i.reg_wizchip_cs_cbfunc))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_init
</UL>

<P><STRONG><a name="[186]"></a>reg_wizchip_spi_cbfunc</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, wizchip_conf.o(i.reg_wizchip_spi_cbfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = reg_wizchip_spi_cbfunc
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_init
</UL>

<P><STRONG><a name="[187]"></a>reg_wizchip_spiburst_cbfunc</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, wizchip_conf.o(i.reg_wizchip_spiburst_cbfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = reg_wizchip_spiburst_cbfunc
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_init
</UL>

<P><STRONG><a name="[179]"></a>si_PDOassign</STRONG> (Thumb, 382 bytes, Stack size 104 bytes, slaveinfo.o(i.si_PDOassign))
<BR><BR>[Stack]<UL><LI>Max Depth = 3576 + Unknown Stack Size
<LI>Call Chain = si_PDOassign &rArr; ec_SDOread &rArr; ecx_SDOread &rArr; ecx_mbxsend &rArr; ecx_mbxempty &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; EtherCat_MACRAW_Recv &rArr; wiz_recv_data &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_readOEsingle
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_SDOread
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtype2string
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si_map_sdo
</UL>

<P><STRONG><a name="[17a]"></a>si_map_sdo</STRONG> (Thumb, 290 bytes, Stack size 64 bytes, slaveinfo.o(i.si_map_sdo))
<BR><BR>[Stack]<UL><LI>Max Depth = 3640 + Unknown Stack Size
<LI>Call Chain = si_map_sdo &rArr; si_PDOassign &rArr; ec_SDOread &rArr; ecx_SDOread &rArr; ecx_mbxsend &rArr; ecx_mbxempty &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; EtherCat_MACRAW_Recv &rArr; wiz_recv_data &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_SDOread
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si_PDOassign
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaveinfo
</UL>

<P><STRONG><a name="[17b]"></a>si_map_sii</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, slaveinfo.o(i.si_map_sii))
<BR><BR>[Stack]<UL><LI>Max Depth = 3848 + Unknown Stack Size
<LI>Call Chain = si_map_sii &rArr; si_siiPDO &rArr; ec_siistring &rArr; ecx_siistring &rArr; ecx_siifind &rArr; ecx_siigetbyte &rArr; ecx_readeepromFP &rArr; ecx_eeprom_waitnotbusyFP &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; EtherCat_MACRAW_Recv &rArr; wiz_recv_data &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si_siiPDO
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaveinfo
</UL>

<P><STRONG><a name="[17d]"></a>si_sdo</STRONG> (Thumb, 302 bytes, Stack size 48 bytes, slaveinfo.o(i.si_sdo))
<BR><BR>[Stack]<UL><LI>Max Depth = 3600 + Unknown Stack Size
<LI>Call Chain = si_sdo &rArr; SDO2string &rArr; ec_SDOread &rArr; ecx_SDOread &rArr; ecx_mbxsend &rArr; ecx_mbxempty &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; EtherCat_MACRAW_Recv &rArr; wiz_recv_data &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_readOE
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_readODlist
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_readODdescription
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDO2string
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_elist2string
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaveinfo
</UL>

<P><STRONG><a name="[17c]"></a>si_siiPDO</STRONG> (Thumb, 740 bytes, Stack size 3232 bytes, slaveinfo.o(i.si_siiPDO))
<BR><BR>[Stack]<UL><LI>Max Depth = 3816 + Unknown Stack Size
<LI>Call Chain = si_siiPDO &rArr; ec_siistring &rArr; ecx_siistring &rArr; ecx_siifind &rArr; ecx_siigetbyte &rArr; ecx_readeepromFP &rArr; ecx_eeprom_waitnotbusyFP &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; EtherCat_MACRAW_Recv &rArr; wiz_recv_data &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_siistring
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_siigetbyte
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_siifind
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_eeprom2pdi
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtype2string
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si_map_sii
</UL>

<P><STRONG><a name="[176]"></a>slaveinfo</STRONG> (Thumb, 750 bytes, Stack size 56 bytes, slaveinfo.o(i.slaveinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 3904 + Unknown Stack Size
<LI>Call Chain = slaveinfo &rArr; si_map_sii &rArr; si_siiPDO &rArr; ec_siistring &rArr; ecx_siistring &rArr; ecx_siifind &rArr; ecx_siigetbyte &rArr; ecx_readeepromFP &rArr; ecx_eeprom_waitnotbusyFP &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; EtherCat_MACRAW_Recv &rArr; wiz_recv_data &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_statecheck
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_siigetbyte
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_siifind
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_readstate
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_close
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_configdc
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_config
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si_sdo
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si_map_sii
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si_map_sdo
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_elist2string
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_ALstatuscode2string
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c6]"></a>socket</STRONG> (Thumb, 384 bytes, Stack size 24 bytes, socket.o(i.socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = socket &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ_BUF
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EtherCat_MACRAW_Open
</UL>

<P><STRONG><a name="[175]"></a>w5500_RegSetup</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, port_func.o(i.w5500_RegSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = w5500_RegSetup &rArr; w5500_chip_init &rArr; wizchip_init &rArr; wizchip_sw_reset &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_phy_init
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_network_info_init
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_chip_init
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[180]"></a>w5500_chip_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, port_func.o(i.w5500_chip_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = w5500_chip_init &rArr; wizchip_init &rArr; wizchip_sw_reset &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_init
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_RegSetup
</UL>

<P><STRONG><a name="[174]"></a>w5500_init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, port_func.o(i.w5500_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = w5500_init &rArr; W5500_GPIO_Configuration &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_wizchip_spiburst_cbfunc
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_wizchip_spi_cbfunc
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_wizchip_cs_cbfunc
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_wizchip_cris_cbfunc
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_GPIO_Configuration
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Configuration
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Hardware_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[182]"></a>w5500_network_info_init</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, port_func.o(i.w5500_network_info_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = w5500_network_info_init &rArr; WIZCHIP_WRITE_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE_BUF
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_RegSetup
</UL>

<P><STRONG><a name="[181]"></a>w5500_phy_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, port_func.o(i.w5500_phy_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = w5500_phy_init &rArr; wizphy_setphyconf &rArr; wizphy_reset &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_setphyconf
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_RegSetup
</UL>

<P><STRONG><a name="[cb]"></a>wiz_recv_data</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, w5500.o(i.wiz_recv_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = wiz_recv_data &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ_BUF
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EtherCat_MACRAW_Recv
</UL>

<P><STRONG><a name="[ce]"></a>wiz_send_data</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, w5500.o(i.wiz_send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = wiz_send_data &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE_BUF
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EtherCat_MACRAW_Send
</UL>

<P><STRONG><a name="[75]"></a>wizchip_bus_readdata</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wizchip_conf.o(i.wizchip_bus_readdata))
<BR>[Address Reference Count : 1]<UL><LI> wizchip_conf.o(.data)
</UL>
<P><STRONG><a name="[76]"></a>wizchip_bus_writedata</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wizchip_conf.o(i.wizchip_bus_writedata))
<BR>[Address Reference Count : 1]<UL><LI> wizchip_conf.o(.data)
</UL>
<P><STRONG><a name="[65]"></a>wizchip_cris_enter</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wizchip_conf.o(i.wizchip_cris_enter))
<BR>[Address Reference Count : 2]<UL><LI> wizchip_conf.o(i.reg_wizchip_cris_cbfunc)
<LI> wizchip_conf.o(.data)
</UL>
<P><STRONG><a name="[66]"></a>wizchip_cris_exit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wizchip_conf.o(i.wizchip_cris_exit))
<BR>[Address Reference Count : 2]<UL><LI> wizchip_conf.o(i.reg_wizchip_cris_cbfunc)
<LI> wizchip_conf.o(.data)
</UL>
<P><STRONG><a name="[68]"></a>wizchip_cs_deselect</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wizchip_conf.o(i.wizchip_cs_deselect))
<BR>[Address Reference Count : 2]<UL><LI> wizchip_conf.o(i.reg_wizchip_cs_cbfunc)
<LI> wizchip_conf.o(.data)
</UL>
<P><STRONG><a name="[67]"></a>wizchip_cs_select</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wizchip_conf.o(i.wizchip_cs_select))
<BR>[Address Reference Count : 2]<UL><LI> wizchip_conf.o(i.reg_wizchip_cs_cbfunc)
<LI> wizchip_conf.o(.data)
</UL>
<P><STRONG><a name="[183]"></a>wizchip_init</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, wizchip_conf.o(i.wizchip_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = wizchip_init &rArr; wizchip_sw_reset &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_sw_reset
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_chip_init
</UL>

<P><STRONG><a name="[6b]"></a>wizchip_spi_readburst</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wizchip_conf.o(i.wizchip_spi_readburst))
<BR>[Address Reference Count : 1]<UL><LI> wizchip_conf.o(i.reg_wizchip_spiburst_cbfunc)
</UL>
<P><STRONG><a name="[69]"></a>wizchip_spi_readbyte</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wizchip_conf.o(i.wizchip_spi_readbyte))
<BR>[Address Reference Count : 1]<UL><LI> wizchip_conf.o(i.reg_wizchip_spi_cbfunc)
</UL>
<P><STRONG><a name="[6c]"></a>wizchip_spi_writeburst</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wizchip_conf.o(i.wizchip_spi_writeburst))
<BR>[Address Reference Count : 1]<UL><LI> wizchip_conf.o(i.reg_wizchip_spiburst_cbfunc)
</UL>
<P><STRONG><a name="[6a]"></a>wizchip_spi_writebyte</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wizchip_conf.o(i.wizchip_spi_writebyte))
<BR>[Address Reference Count : 1]<UL><LI> wizchip_conf.o(i.reg_wizchip_spi_cbfunc)
</UL>
<P><STRONG><a name="[18a]"></a>wizchip_sw_reset</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, wizchip_conf.o(i.wizchip_sw_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = wizchip_sw_reset &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ_BUF
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE_BUF
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_init
</UL>

<P><STRONG><a name="[f8]"></a>wizphy_getphylink</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, wizchip_conf.o(i.wizphy_getphylink))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wizphy_getphylink &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Hardware_Reset
</UL>

<P><STRONG><a name="[18b]"></a>wizphy_reset</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, wizchip_conf.o(i.wizphy_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wizphy_reset &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_setphyconf
</UL>

<P><STRONG><a name="[189]"></a>wizphy_setphyconf</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, wizchip_conf.o(i.wizphy_setphyconf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wizphy_setphyconf &rArr; wizphy_reset &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_reset
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_phy_init
</UL>

<P><STRONG><a name="[8f]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[15d]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_err2string
</UL>

<P><STRONG><a name="[18d]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
</UL>

<P><STRONG><a name="[15c]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_err2string
</UL>

<P><STRONG><a name="[191]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[15b]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_err2string
</UL>

<P><STRONG><a name="[1ca]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[190]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[18f]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[1cb]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)

<P><STRONG><a name="[192]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[d5]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDO2string
</UL>

<P><STRONG><a name="[194]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[195]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[8b]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[1cc]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[1cd]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[7d]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[e1]"></a>SetSysClock</STRONG> (Thumb, 168 bytes, Stack size 12 bytes, system_stm32f4xx.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[172]"></a>ecx_clear_rxbufstat</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nicdrv.o(i.ecx_clear_rxbufstat))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_setupnic
</UL>

<P><STRONG><a name="[162]"></a>ecx_recvpkt</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, nicdrv.o(i.ecx_recvpkt))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ecx_recvpkt &rArr; EtherCat_MACRAW_Recv &rArr; wiz_recv_data &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EtherCat_MACRAW_Recv
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_inframe
</UL>

<P><STRONG><a name="[173]"></a>ecx_waitinframe_red</STRONG> (Thumb, 346 bytes, Stack size 72 bytes, nicdrv.o(i.ecx_waitinframe_red))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; EtherCat_MACRAW_Recv &rArr; wiz_recv_data &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_outframe
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_inframe
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_timer_start
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_timer_is_expired
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_srconfirm
</UL>

<P><STRONG><a name="[13d]"></a>ecx_writedatagramdata</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ethercatbase.o(i.ecx_writedatagramdata))
<BR><BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_setupdatagram
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_adddatagram
</UL>

<P><STRONG><a name="[136]"></a>ecx_SDOinfoerror</STRONG> (Thumb, 68 bytes, Stack size 48 bytes, ethercatcoe.o(i.ecx_SDOinfoerror))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ecx_SDOinfoerror &rArr; ecx_pusherror &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_pusherror
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readOEsingle
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readODlist
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readODdescription
</UL>

<P><STRONG><a name="[13f]"></a>ecx_config_create_input_mappings</STRONG> (Thumb, 852 bytes, Stack size 88 bytes, ethercatconfig.o(i.ecx_config_create_input_mappings))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = ecx_config_create_input_mappings &rArr; ecx_FPWR &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; EtherCat_MACRAW_Recv &rArr; wiz_recv_data &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPWR
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_map_group
</UL>

<P><STRONG><a name="[140]"></a>ecx_config_create_output_mappings</STRONG> (Thumb, 790 bytes, Stack size 96 bytes, ethercatconfig.o(i.ecx_config_create_output_mappings))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = ecx_config_create_output_mappings &rArr; ecx_FPWR &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; EtherCat_MACRAW_Recv &rArr; wiz_recv_data &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPWR
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_map_group
</UL>

<P><STRONG><a name="[141]"></a>ecx_config_find_mappings</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, ethercatconfig.o(i.ecx_config_find_mappings))
<BR><BR>[Stack]<UL><LI>Max Depth = 3744<LI>Call Chain = ecx_config_find_mappings &rArr; ecx_map_sii &rArr; ecx_siiPDO &rArr; ecx_siifind &rArr; ecx_siigetbyte &rArr; ecx_readeepromFP &rArr; ecx_eeprom_waitnotbusyFP &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; EtherCat_MACRAW_Recv &rArr; wiz_recv_data &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_usleep
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_map_sm
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_map_sii
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_map_coe_soe
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_get_threadcount
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_map_group
</UL>

<P><STRONG><a name="[147]"></a>ecx_config_from_table</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, ethercatconfig.o(i.ecx_config_from_table))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ecx_config_from_table &rArr; ec_findconfig
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_findconfig
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_init
</UL>

<P><STRONG><a name="[143]"></a>ecx_get_threadcount</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ethercatconfig.o(i.ecx_get_threadcount))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_find_mappings
</UL>

<P><STRONG><a name="[168]"></a>ecx_lookup_mapping</STRONG> (Thumb, 236 bytes, Stack size 32 bytes, ethercatconfig.o(i.ecx_lookup_mapping))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ecx_lookup_mapping
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_map_sii
</UL>

<P><STRONG><a name="[14e]"></a>ecx_lookup_prev_sii</STRONG> (Thumb, 440 bytes, Stack size 24 bytes, ethercatconfig.o(i.ecx_lookup_prev_sii))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ecx_lookup_prev_sii &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_init
</UL>

<P><STRONG><a name="[142]"></a>ecx_map_coe_soe</STRONG> (Thumb, 250 bytes, Stack size 40 bytes, ethercatconfig.o(i.ecx_map_coe_soe))
<BR><BR>[Stack]<UL><LI>Max Depth = 3688<LI>Call Chain = ecx_map_coe_soe &rArr; ecx_readIDNmap &rArr; ecx_SoEread &rArr; ecx_mbxsend &rArr; ecx_mbxempty &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; EtherCat_MACRAW_Recv &rArr; wiz_recv_data &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readPDOmapCA
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readPDOmap
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_statecheck
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readIDNmap
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_find_mappings
</UL>

<P><STRONG><a name="[145]"></a>ecx_map_sii</STRONG> (Thumb, 262 bytes, Stack size 3136 bytes, ethercatconfig.o(i.ecx_map_sii))
<BR><BR>[Stack]<UL><LI>Max Depth = 3720<LI>Call Chain = ecx_map_sii &rArr; ecx_siiPDO &rArr; ecx_siifind &rArr; ecx_siigetbyte &rArr; ecx_readeepromFP &rArr; ecx_eeprom_waitnotbusyFP &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; EtherCat_MACRAW_Recv &rArr; wiz_recv_data &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siiPDO
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_lookup_mapping
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_find_mappings
</UL>

<P><STRONG><a name="[146]"></a>ecx_map_sm</STRONG> (Thumb, 268 bytes, Stack size 48 bytes, ethercatconfig.o(i.ecx_map_sm))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = ecx_map_sm &rArr; ecx_FPWR &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; EtherCat_MACRAW_Recv &rArr; wiz_recv_data &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPWR
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_find_mappings
</UL>

<P><STRONG><a name="[14b]"></a>ecx_set_slaves_to_default</STRONG> (Thumb, 298 bytes, Stack size 112 bytes, ethercatconfig.o(i.ecx_set_slaves_to_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = ecx_set_slaves_to_default &rArr; ecx_BWR &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; EtherCat_MACRAW_Recv &rArr; wiz_recv_data &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_BWR
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_init
</UL>

<P><STRONG><a name="[152]"></a>ecx_parentport</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, ethercatdc.o(i.ecx_parentport))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ecx_parentport
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_configdc
</UL>

<P><STRONG><a name="[153]"></a>ecx_porttime</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, ethercatdc.o(i.ecx_porttime))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_configdc
</UL>

<P><STRONG><a name="[154]"></a>ecx_prevport</STRONG> (Thumb, 134 bytes, Stack size 0 bytes, ethercatdc.o(i.ecx_prevport))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_configdc
</UL>

<P><STRONG><a name="[16a]"></a>ecx_mbxemergencyerror</STRONG> (Thumb, 98 bytes, Stack size 64 bytes, ethercatmain.o(i.ecx_mbxemergencyerror))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ecx_mbxemergencyerror &rArr; ecx_pusherror &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_pusherror
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_current_time
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_mbxreceive
</UL>

<P><STRONG><a name="[16c]"></a>ecx_mbxerror</STRONG> (Thumb, 68 bytes, Stack size 56 bytes, ethercatmain.o(i.ecx_mbxerror))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ecx_mbxerror &rArr; ecx_pusherror &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_pusherror
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_current_time
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_mbxreceive
</UL>

<P><STRONG><a name="[193]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
</UL>

<P><STRONG><a name="[18e]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[ae]"></a>_fp_digits</STRONG> (Thumb, 432 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[63]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
